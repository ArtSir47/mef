<?php
include '../functions.php';
header_natec(
    'Первый Backend плагин',
    '/backend_uIs_plugin/first_backend_plugin.php',  // $url_ru,
    '/uk/backend_uIs_plugin/first_backend_plugin.php', // $url_uk,
    '/en/backend_uIs_plugin/first_backend_plugin.php'  // $url_en
);
?>

    <div class="container container-sidebar">
        <?php sidebar_natec(); ?>
        <div class="content">

            <h1>Первый Backend плагин (preview)</h1>

            <h2 id="creation">Создание плагина на основе шаблона</h2>
            <p>Теперь мы разработаем базовый плагин бэкэнда для публикации на платформе preview MEF.DEV. Для разработки этого плагина Вам нужны только знания написании кода на языке C#<p>
            <p>Следуйте инструкциям и узнайте, как создать свой первый плагин, который будет делиться с другими разработчиками Вашими данными или бизнес-логикой.<p>
            <p>Сделайте копию тестового проекта из репозитория<p>
            <p>// ссылка на репозиторий <a href="https://github.com/mef-dev/tutorial-backend-plugin">https://github.com/mef-dev/tutorial-backend-plugin</a><p>
            <h3>Шаг 1. Создание нового проекта</h3>
            <p>Откройте проект в Visual Studio, добавьте в источники NuGet пакетов<p>
            <p>// ссылка на сервер NuGet пакетов <a href="https://nuget.mef.dev">https://nuget.mef.dev/v3/index.json</a><p>
            <img src="http://mef.dev/images/image38.png">
            <p></p>
            <p>У Вас появится доступ до пакетов доступных для использования на платформе<p>
            <h3>Шаг 2. Восстановление пакетов для нового проекта</h3>
            <p>Структура платформы свободная, главное придерживаться правил определения атрибутов для классов плагинов и сущностей<p>
            <img src="http://mef.dev/images/image20.png">
            <p></p>
            <p>Для продолжения работы Вам необходимо восстановить пакеты для скачанного проекта, если проект создается з нуля – добавить в проект пакет <a href="https://nuget.mef.dev/packages/UCP.Common.Plugin">UCP.Common.Plugin</a> - именно этот пакет выполняет функции контракта для Вашего плагина бизнес-логики или данных<p>
            <h3>Шаг 3. Внесение изменений в проект</h3>
            <p>Уникальным идентификатором на платформе является название проекта, а также название сущности (entity) – поэтому переименуем проект і изменим название сущности<p>
            <img src="http://mef.dev/images/image21.png">
            <p></p>
            <p>Определите уникальный Export и ModuleName, который совпадает с названием проекта<p>
            <p>Если есть необходимость в хранении данных для указанной сущности, необходимо наследовать класс BaseEntity для всех классов, которые будут передаваться в плагин или получаться из него<p>
            <img src="http://mef.dev/images/image34.png">
            <p></p>
            <p>Название экспортируемого класса (contractName) для работы с сущностью через POST для плагина должно совпадать с названием плагина. Название сущностей для получения данных должны наследовать BaseEntity но название contractName может быть произвольной. После внесенных изменений можно собрать архив для загрузки на платформу. Важно чтобы архив содержал зависимости проекта – прощу всего вызвать команду из консоли dotnet publish и все содержимое папки поместить в zip архив.<p>
            <img src="http://mef.dev/images/image3.png">
            <h2 id="registration">Регистрация плагина на платформе</h2>
            <p>Для этого необходимо быть зарегистрированным пользователем платформы с набором прав Developer или Developer Admin - если Ви не зарегистрированы, то во время первого входа на платформу по адресу
            <a href="http://preview.mef.dev">https://preview.mef.dev</a> Вам буде предоставлена возможность пройти регистрацию</p>
            <h3>Шаг 4. Загрузка плагина</h3>
            <p>Перейдите в список Ваших плагинов, нажмите создать новый плагин</p>
            <img src="http://mef.dev/images/image4.png">
            <p></p>
            <p>Заполните форму указав информацию ниже - сначала определите тип API для плагина</p>
            <img src="http://mef.dev/images/image27.png">
            <p></p>
            <p>Название и описания, изображения плагина являются произвольными. Заполнив основную информацию, нажмите кнопку "Сохранить", и тогда вы сможете загрузить подготовленный плагин на платформу</p>
            <img src="http://mef.dev/images/image28.png">
            <p></p>
            <p>Если загрузка была успешной, то в списке доступных версий появится только что загруженный плагин</p>
            <img src="http://mef.dev/images/image37.png">
            <p></p>
            <p>Выберите необходимую версию для использования на платформе и нажмите кнопку "Сохранить".</p>
            <p><b>С этого момента сущности Вашего плагина становятся доступны для использования – как для внешнего (через API), так и для внутреннего (через переиспользование).</b> Мы можем проверить результат загрузки с помощью любого REST клиента.</p>
            <h3>Шаг 5. Проверка загруженного плагина через REST client</h3>
            <p>Пользователя для доступа к API можно создать в разделе Security своего <a href="https://preview.mef.dev/account/profile">профиля</a>, куда можно попасть нажав на иконку пользователя в верхнем правом углу и выбрав пункт меню Profile. После нажатия на кнопку Set password Вы сможете задать логин пользователя и пароль для авторизации Basic Auth</p>
            <img src="http://mef.dev/images/image1.png">
            <h2 id="versioning">Версионность изменений плагина</h2>
            <p>Когда Вам нужно обновить плагин, Вам достаточно внести необходимые изменения, изменить версию пакета и собрать архив, как при первой загрузке, загрузить его на платформу и выбрать новую версию пакета из выпадающего списка:</p>
            <img src="http://mef.dev/images/image31.png">
        </div>
    </div>

<?php

footer_natec();
?>