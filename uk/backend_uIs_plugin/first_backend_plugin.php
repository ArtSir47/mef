<?php
include '../../functions.php';
header_natec(
    'Первый Backend плагин',
    '/backend_uIs_plugin/first_backend_plugin.php',  // $url_ru,
    '/uk/backend_uIs_plugin/first_backend_plugin.php', // $url_uk,
    '/en/backend_uIs_plugin/first_backend_plugin.php'  // $url_en
);
?>

    <div class="container container-sidebar">
        <?php sidebar_natec(); ?>
        <div class="content">

            <h1>Перший Backend плагін (preview)</h1>

            <h2 id="creation">Створення плагіну на підставі шаблону</h2>
            <p>Зараз  ми розробимо базовий бекенд  плагін для публікації на платформі preview MEF.DEV. Для розробки цього плагіна необхідні лише знання щодо написання коду на C#<p>
            <p>Дотримуйтесь інструкцій і дізнайтеся, як створити свій перший плагін, який надаватиме доступ до Ваших даних або за Вашою бізнес логікою.<p>
            <p>Зробіть копію тестового проекту із репозиторію<p>
            <p>// посилання на репозиторій <a href="https://github.com/mef-dev/tutorial-backend-plugin">https://github.com/mef-dev/tutorial-backend-plugin</a><p>
            <h3>Крок 1. Створення нового проекту</h3>
            <p>Відкрийте проект в Visual Studio, додайте в перелік джерел NuGet пакетів<p>
            <p>// посилання на сервер NuGet пакетів <a href="https://nuget.mef.dev">https://nuget.mef.dev/v3/index.json</a><p>
            <img src="http://mef.dev/images/image38.png">
            <p></p>
            <p>У Вас з’явиться доступ до пакетів доступних до використання на платформі<p>
            <h3>Крок 2. Відновлення пакетів для нового проекту</h3>
            <p>Структура платформи довільна, головне дотримуватися правил визначення атрибутів для класів плагінів і сутностей<p>
            <img src="http://mef.dev/images/image20.png">
            <p></p>
            <p>Для продовження роботи Вам потрібно відновити пакети для скачаного проекту, якщо проект створюється з нуля – додати в проект пакет <a href="https://nuget.mef.dev/packages/UCP.Common.Plugin">UCP.Common.Plugin</a> - саме цей пакет виконує функції контракту до Вашого пакету бізнес-логіки або даних<p>
            <h3>Крок 3. Внесення змін в проект</h3>
            <p>Унікальним ідентифікатором на платформі є назва проекту,  а також назва сутності (entity) – тож перейменовуємо проект і модифікуємо назву сутності<p>
            <img src="http://mef.dev/images/image21.png">
            <p></p>
            <p>Визначте унікальний Export і ModuleName, який співпадає з назвою проекту<p>
            <p>Якщо є необхідність в збереженні даних для вказаної сутності, необхідно наслідувати клас BaseEntity для усіх класів які будуть передаватися у плагін або отримуватися з нього<p>
            <img src="http://mef.dev/images/image34.png">
            <p></p>
            <p>Назва експортованого класу (contractName) для роботи з сутністю на POST для плагіну повинна співпадати з назвою плагіну. Назви сутностей на отримання даних повинні наслідувати BaseEntity але назва contractName може бути довільною. Після внесених модифікацій можна зібрати архів для завантаження на платформу. Важливо аби архів містив залежності проекту - найпростіше викликати команду з консолі dotnet publish і увесь вміст папки помістити до zip архіву.<p>
            <img src="http://mef.dev/images/image3.png">
            <h2 id="registration">Реєстрація плагіну на платформі</h2>
            <p>Для цього повинно бути зареєстрованим користувачем платформи із ролью Developer - якщо Ви не зареєстровані то під час логіну до платформи за адресою 
            <a href="http://preview.mef.dev">https://preview.mef.dev</a> Вам буде надано можливості здійснити реєстрацію </p>
            <h3>Крок 4. Завантаження плагіну</h3>
            <p>Перейдіть до переліку ваших плагінів, натисніть створити новий плагін</p>
            <img src="http://mef.dev/images/image4.png">
            <p></p>
            <p>Заповніть форму вказавши актуальну інформацію – для початку визначте для плагіну тип API</p>
            <img src="http://mef.dev/images/image27.png">
            <p></p>
            <p>Назва і описи, зображення до плагіну довільні. Після заповнення основної інформації, натисніть «Зберегти» і після цього з'явиться змога завантажити підготований плагін на платформу</p>
            <img src="http://mef.dev/images/image28.png">
            <p></p>
            <p>Якщо завантаження пройшло успішно, то в переліку доступних версій з’явиться щойно завантажений плагін</p>
            <img src="http://mef.dev/images/image37.png">
            <p></p>
            <p>Обираємо необхідну версію і натискаємо «Зберегти».</p>
            <p><b>З цього моменту сутності сервісу стають доступні для зверненню по API. Можемо перевірити результат завантаження використовуючи любий REST клієнт.</p>
            <h3>Крок 5. Перевірка завантаженого плагіну використовуючи REST client</h3>
            <p>Користувача для доступу до API можна створити в розділі Security свого <a href="https://preview.mef.dev/account/profile">профілю</a>, куди можна потрапити натиснувши на іконку користувача у верхньому правому кутку і вибравши пункт меню Profile. Після натискання на кнопку Set password Ви зможете задати логін користувача і пароль для авторизації Basic Auth</p>
            <img src="http://mef.dev/images/image1.png">
            <h2 id="versioning">Версійність змін плагіну</h2>
            <p>Коли виникне необхідність оновити плагін, потрібно внести необхідні зміни, змінити версію пакету і зібрати архів як і при першому завантаженні, завантажити на платформу, змінити версію пакету обравши з випадаючого списку</p>
            <img src="http://mef.dev/images/image31.png">
        </div>
    </div>

<?php

footer_natec();
?>